// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// t_cpp
NumericMatrix t_cpp(NumericMatrix mat);
RcppExport SEXP _GFusionMed_t_cpp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(t_cpp(mat));
    return rcpp_result_gen;
END_RCPP
}
// prod_cpp
NumericMatrix prod_cpp(NumericMatrix mat1, NumericMatrix mat2);
RcppExport SEXP _GFusionMed_prod_cpp(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(prod_cpp(mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}
// t_prod_cpp
NumericMatrix t_prod_cpp(NumericMatrix mat1, NumericMatrix mat2);
RcppExport SEXP _GFusionMed_t_prod_cpp(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(t_prod_cpp(mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}
// prod_t_cpp
NumericMatrix prod_t_cpp(NumericMatrix mat1, NumericMatrix mat2);
RcppExport SEXP _GFusionMed_prod_t_cpp(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(prod_t_cpp(mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}
// inverse_cpp
NumericMatrix inverse_cpp(NumericMatrix mat);
RcppExport SEXP _GFusionMed_inverse_cpp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(inverse_cpp(mat));
    return rcpp_result_gen;
END_RCPP
}
// make_symmetric_values_cpp
NumericMatrix make_symmetric_values_cpp(NumericMatrix mat);
RcppExport SEXP _GFusionMed_make_symmetric_values_cpp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(make_symmetric_values_cpp(mat));
    return rcpp_result_gen;
END_RCPP
}
// make_symmetric_zero_cpp
NumericMatrix make_symmetric_zero_cpp(NumericMatrix mat);
RcppExport SEXP _GFusionMed_make_symmetric_zero_cpp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(make_symmetric_zero_cpp(mat));
    return rcpp_result_gen;
END_RCPP
}
// dmvnrm_arma
arma::vec dmvnrm_arma(arma::mat x, arma::rowvec mean, arma::mat sigma, bool logd);
RcppExport SEXP _GFusionMed_dmvnrm_arma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnrm_arma(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// rmvnrm_arma
arma::mat rmvnrm_arma(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP _GFusionMed_rmvnrm_arma(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnrm_arma(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GFusionMed_t_cpp", (DL_FUNC) &_GFusionMed_t_cpp, 1},
    {"_GFusionMed_prod_cpp", (DL_FUNC) &_GFusionMed_prod_cpp, 2},
    {"_GFusionMed_t_prod_cpp", (DL_FUNC) &_GFusionMed_t_prod_cpp, 2},
    {"_GFusionMed_prod_t_cpp", (DL_FUNC) &_GFusionMed_prod_t_cpp, 2},
    {"_GFusionMed_inverse_cpp", (DL_FUNC) &_GFusionMed_inverse_cpp, 1},
    {"_GFusionMed_make_symmetric_values_cpp", (DL_FUNC) &_GFusionMed_make_symmetric_values_cpp, 1},
    {"_GFusionMed_make_symmetric_zero_cpp", (DL_FUNC) &_GFusionMed_make_symmetric_zero_cpp, 1},
    {"_GFusionMed_dmvnrm_arma", (DL_FUNC) &_GFusionMed_dmvnrm_arma, 4},
    {"_GFusionMed_rmvnrm_arma", (DL_FUNC) &_GFusionMed_rmvnrm_arma, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_GFusionMed(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
